//
//  CountriesPresenter.swift
//  SimpleCustoms
//
//  Created Газияв Исхаков on 31.01.2020.
//  Copyright © 2020 Газияв Исхаков. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CountriesPresenter {
    
    weak private var view: CountriesViewInput?
    var interactor: CountriesInteractorInputProtocol?
    let searchStateDataProvider: SearchStateDataProtocol
    private let router: CountriesWireframeInput
    
    var countriesCount: Int {
        return searchStateDataProvider.currentData.count
    }
    
    init(interface: CountriesViewInput,
         interactor: CountriesInteractorInputProtocol?,
         router: CountriesWireframeInput,
         searchDataProvider: SearchStateDataProtocol = SearchStateDataProvider()) {
        
        self.view = interface
        self.interactor = interactor
        self.router = router
        self.searchStateDataProvider = searchDataProvider
    }
}

extension CountriesPresenter: CountriesInteractorOutputProtocol {
    
    func obtainCountriesSuccess(countries: [Country]) {
        searchStateDataProvider.setCountries(countries: countries)
        view?.success()
    }
    
    func obtainCountriesFailure() {
        view?.failure()
    }
}

extension CountriesPresenter: CountriesPresenterOutput {
    func fetchCountries() {
        interactor?.fetchCountries()
    }
    
    func setCurrentRegion(_ region: Regions) {
        searchStateDataProvider.setRegion(region: region)
    }
    
    func stopSearching() {
        searchStateDataProvider.stopSearching()
    }
    
    func searchStarted(with searchText: String) {
        searchStateDataProvider.startSearching(searchText)
    }
    
    func country(atIndexPath indexPath: IndexPath) -> Country {
        return searchStateDataProvider.currentData[indexPath.row]
    }
}
