//
//  CountriesViewController.swift
//  SimpleCustoms
//
//  Created Газияв Исхаков on 31.01.2020.
//  Copyright © 2020 Газияв Исхаков. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Lottie

class CountriesViewController: UIViewController {
    
    var presenter: CountriesPresenterOutput!
    
    //MARK: - Private Properties
    
    private let cellId = String(describing: CountryTableViewCell.self)
    
    private let countriesTableView: UITableView = {
        let tableView = UITableView()
        tableView.isHidden = true
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.separatorStyle = .none
        tableView.register(UINib(nibName: "CountryTableViewCell", bundle: nil), forCellReuseIdentifier: String(describing: CountryTableViewCell.self))
        if #available(iOS 13.0, *) {
            tableView.backgroundColor = .secondarySystemBackground
        } else {
            tableView.backgroundColor = #colorLiteral(red: 0.8588235294, green: 0.8862745098, blue: 0.9137254902, alpha: 1)
        }
        return tableView
    }()
    
    private let loadingAnimation: AnimationView = {
        let animation = Animation.named("3003-bouncy-balls")
        var load = AnimationView()
        load.animation = animation
        load.animationSpeed = 1
        load.loopMode = .loop
        load.contentMode = .scaleAspectFit
        load.translatesAutoresizingMaskIntoConstraints = false
        return load
    }()
    
    private let errorHandler = ErrorView()
    private let searchController = UISearchController(searchResultsController: nil)
    private let regionChooser = RegionView()
    
    
    //MARK: - LifeCycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUIElements()
        initialSetup()
    }
    
    //MARK: - Private Methods
    
    private func initialSetup() {
        loadingAnimation.isHidden = false
        loadingAnimation.play()
        presenter.fetchCountries()
    }
    
    private func setupUIElements() {
        if #available(iOS 13.0, *) {
            navigationController?.view.backgroundColor = .tertiarySystemBackground
        } else {
            view.backgroundColor = #colorLiteral(red: 0.8588235294, green: 0.8862745098, blue: 0.9137254902, alpha: 1)
        }
        self.navigationItem.largeTitleDisplayMode = .never
        setupSearchController()
        setupTableView()
        setupRegionChooser()
        setupAnimation()
        setupErrorView()
    }
    
    private func setupSearchController() {
        searchController.searchBar.delegate = self
        searchController.searchBar.placeholder = "Искать страну"
        self.navigationItem.searchController = searchController
        self.definesPresentationContext = true
        searchController.obscuresBackgroundDuringPresentation = false
    }
    
    private func setupRegionChooser() {
        regionChooser.translatesAutoresizingMaskIntoConstraints = false
        regionChooser.delegate = self
        view.addSubview(regionChooser)
        
        regionChooser.edgesToSuperview(excluding: .bottom, usingSafeArea: true)
        regionChooser.height(46)
    }
    
    private func setupAnimation() {
        view.addSubview(loadingAnimation)
        loadingAnimation.center(in: view)
        loadingAnimation.height(75)
        loadingAnimation.width(75)
    }
    
    private func setupTableView() {
        countriesTableView.delegate = self
        countriesTableView.dataSource = self
        view.addSubview(countriesTableView)
        
        countriesTableView.top(to: view.safeAreaLayoutGuide, offset: 45)
        countriesTableView.edgesToSuperview(excluding: .top)
    }
    
    private func setupErrorView() {
        errorHandler.translatesAutoresizingMaskIntoConstraints = false
        errorHandler.isHidden = true
        view.addSubview(errorHandler)
        errorHandler.top(to: view.safeAreaLayoutGuide, offset: 55)
        errorHandler.centerX(to: view)
        errorHandler.widthToSuperview()
        errorHandler.heightToSuperview(view.heightAnchor, multiplier: 0.5)
        
        errorHandler.buttonForError.addTarget(self, action: #selector(buttonAction), for: .touchUpInside)
    }
    
    @objc private func buttonAction() {
        errorHandler.fadeOut()
        presenter.fetchCountries()
    }
}

//MARK: - CountriesViewProtocol
extension CountriesViewController: CountriesViewInput {
    
    func reloadData() {
        self.countriesTableView.reloadData()
    }
    
    func success() {
        self.loadingAnimation.stop()
        self.countriesTableView.fadeIn()
        self.loadingAnimation.isHidden = true
        self.countriesTableView.reloadData()
    }
    
    func failure() {
        loadingAnimation.isHidden = true
        errorHandler.fadeIn()
    }
}

extension CountriesViewController: UITableViewDelegate, UITableViewDataSource {
    
    //MARK: - UITableViewDataSource
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.countriesCount 
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: cellId) as! CountryTableViewCell
        cell.fillCell(with: presenter.country(atIndexPath: indexPath))
        return cell
    }
    
    //MARK: - UITableViewDelegate
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        presenter.didSelectCountry(atIndexPath: indexPath)
    }

    func tableView(_ tableView: UITableView, didHighlightRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath) as! CountryTableViewCell
        
        UIView.animate(withDuration: 0.2) {
            let scale: CGFloat = 0.9
            cell.transform = CGAffineTransform(scaleX: scale, y: scale)
        }
    }
    
    func tableView(_ tableView: UITableView, didUnhighlightRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath) as! CountryTableViewCell
        
        UIView.animate(withDuration: 0.2) {
            cell.transform = CGAffineTransform.identity
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 70
    }
}

//MARK: - UISearchBarDelegate
extension CountriesViewController: UISearchBarDelegate {
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        presenter.searchStarted(with: searchText)
        countriesTableView.reloadData()
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        presenter.stopSearching()
        searchController.searchBar.showsCancelButton = false
        countriesTableView.reloadData()
    }
    
    func searchBarShouldBeginEditing(_ searchBar: UISearchBar) -> Bool {
        searchController.searchBar.showsCancelButton = true
        return true
    }
}

//MARK: - RegionChooseDelegate
extension CountriesViewController: RegionChooseDelegate {
    func userDidChooseRegion(_ region: Regions) {
        presenter.setCurrentRegion(region)
        countriesTableView.reloadData()
    }
    
}

